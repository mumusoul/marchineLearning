# -*- coding: utf-8 -*-
"""
Created on Tue Oct 30 10:36:55 2018

@author: 沐日光华
"""

import numpy as np
import operator as op
import matplotlib
import matplotlib.pyplot as plt
from os import listdir

def createDataSet():
    group=np.array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])
    labels=['A','A','B','B']
    return group,labels

'''
inX为待分类向量，dataSet为训练样本集，labels为标签向量，k为k近邻参数
采用欧式距离公式计算待分类向量与训练样本集之间的距离
'''

def classify0(inX,dataSet,labels,k):    
    dataSetSize=dataSet.shape[0]        #多少组数据
    diffMat=np.tile(inX,(dataSetSize,1))-dataSet    #坐标之差
    sqDiffMat=diffMat**2
    sqDistances=sqDiffMat.sum(axis=1)
    distances=sqDistances**0.5          #计算距离
    sortedDistIndicies=distances.argsort()
    classCount={}
    for i in range(k):
        voteIlabel=labels[sortedDistIndicies[i]]
        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1
    sortedClassCount=sorted(classCount.items(),key=op.itemgetter(1),reverse=True)
    return sortedClassCount[0][0]

'''
将文本文件处理为矩阵，先得到文件行数，创建以0填充的矩阵，
使用line.strip()截取掉所有回车，再用\t将整行数据分割成一个列表，
选取前3个元素，存入特征矩阵,并将最后一个元素存入classLabelVector中
'''

def file2matrix(filename):
    fr=open(filename)
    arrayOLines=fr.readlines()      #得到文件行数
    numberOLines=len(arrayOLines)
    returnMat=np.zeros((numberOLines,3))    #创建返回的numpy矩阵
    classLabelVector=[]
    index=0
    for line in arrayOLines:        #解析文件数据到列表
        line=line.strip()
        listFromLine=line.split('\t')
        returnMat[index,:]=listFromLine[0:3]
        classLabelVector.append(int(listFromLine[-1]))
        index+=1
    return returnMat,classLabelVector

'''
归一化，公式为：newValue=(oldValue-min)/(max-min)
'''

def autoNorm(dataSet):
    minVals=dataSet.min(0)
    maxVals=dataSet.max(0)
    ranges=maxVals-minVals
    normDataSet=np.zeros(np.shape(dataSet))
    m=dataSet.shape[0]
    normDataSet=dataSet-np.tile(minVals,(m,1))
    normDataSet=normDataSet/np.tile(maxVals,(m,1))
    return normDataSet,ranges,minVals

#测试代码
def datingClassTest():
    hoRatio=0.1
    datingDataMat,datingLabels=file2matrix('datingTestSet2.txt')
    normMat,ranges,minVals=autoNorm(datingDataMat)
    m=normMat.shape[0]
    numTestVecs=int(m*hoRatio)  #测试数量
    erroeCount=0.0      #错误计数器
    for i in range(numTestVecs):
        classifierResult=classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3)
        print("the classifierResult came back with:%d, the real answer is: %d"%(classifierResult,datingLabels[i]))
        if(classifierResult!=datingLabels[i]):
            erroeCount+=1.0
    print(erroeCount/float(numTestVecs))

#预测函数
def classifyPerson():
    resultList=['not at all','in small doses','in large doses']
    percentTats=float(input("percentage of time spent playing video games?"))
    icecream=float(input("liters of ice cream consumed per year?"))
    ffMiles=float(input("frequent flier miles earned per year?"))
    datingDataMat,datingLabels=file2matrix('datingTestSet2.txt')
    normMat,ranges,minVals=autoNorm(datingDataMat)
    inArr=np.array([ffMiles,percentTats,icecream])
    classifierResult=classify0((inArr-minVals)/ranges,normMat,datingLabels,3)
    print("you will probably like this person:",resultList[classifierResult-1])

'''
测试数据为32×32的二进制图像矩阵，函数将其转换为1×1024的向量
'''

def im2vector(filename):
    returnVect=np.zeros((1,1024))
    fr=open(filename)
    for i in range(32):
        lineStr=fr.readline()
        for j in range(32):
            returnVect[0,32*i+j]=int(lineStr[j])
    return returnVect

def handwritingClassTest():
    hwLabels=[]
    trainingFileList=listdir('digits/trainingDigits')
    m=len(trainingFileList)
    trainingMat=((m,1024))
    for i in range(m):
        fileNameStr=trainingFileList[i]
        fileStr=fileNameStr.split('.')[0]
        classNumStr=int(fileStr.split('_')[0])
        hwLabels.append(classNumStr)
        trainingMat[i,:]=im2vector('digits/trainingDigits/%s'%fileNameStr)
    testFileList=listdir('digits/testDigits')
    errorCount=0.0
    mTest=len(testFileList)
    for i in range(mTest):
        fileNameStr=testFileList[i]
        fileStr=fileNameStr.split('.')[0]
        classNumStr=int(fileStr.split('_')[0])
        vectorUnderTest=im2vector('digits/testDigits/%s'%fileNameStr)
        classifierResult=classify0(vectorUnderTest,trainingMat,hwLabels,3)
        print("the classifier came back with:%d,the real answer is:%d"%(classifierResult,classNumStr))
        if(classifierResult!=classNumStr):
            errorCount+=1
    print(errorCount/float(mTest))
    
    
    


